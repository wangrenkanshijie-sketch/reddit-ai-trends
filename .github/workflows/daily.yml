name: Daily Reddit AI Trends

on:
  schedule:
    # 每天 06:05 UTC 运行（注意：这是 UTC，不是你本地时区）
    - cron: "5 6 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # 需要回推 reports 目录
    permissions:
      contents: write

    steps:
      # 1) 拉代码
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) 安装依赖（没有就跳过）
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4) 生成中文报告（只生成 ZH）
      - name: Generate ZH report
        env:
          REDDIT_CLIENT_ID:     ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT:    ${{ secrets.REDDIT_USER_AGENT }}
          GROQ_API_KEY:         ${{ secrets.GROQ_API_KEY }}
        run: |
          mkdir -p reports
          # 你的脚本若默认生成中英文，可以加 --languages zh
          # 没有参数要求的话，保持现状也行
          python report_generation.py --languages zh

      # 5) 探针：看看报告是否生成
      - name: Show generated files
        run: |
          echo "==== reports tree ===="
          ls -lah reports || true
          echo "==== preview zh ===="
          head -n 60 reports/latest_report_zh.md || true

      # 6) 提交、推送（带重试，解决偶发网络抖动）
      - name: Commit & push reports
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add reports/ || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily report update"
            for i in 1 2 3; do
              git push && break
              echo "push failed, retry in 5s..."; sleep 5
            done
          fi

      # 7) 将中文报告写入 Notion 数据库（分页写入，稳定可靠）
      - name: Push ZH report to Notion (paged & robust)
        env:
          NOTION_API_KEY:     ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          python - <<'PY'
          import os, requests, datetime

          TOKEN = os.environ.get("NOTION_API_KEY")
          DB_ID = os.environ.get("NOTION_DATABASE_ID")
          FILE = "reports/latest_report_zh.md"

          if not TOKEN or not DB_ID:
              raise SystemExit("NOTION_API_KEY / NOTION_DATABASE_ID 为空，请在仓库 Secrets 配置。")

          if not os.path.exists(FILE):
              raise SystemExit("未找到中文日报文件：reports/latest_report_zh.md。请检查生成步骤。")

          headers = {
              "Authorization": f"Bearer {TOKEN}",
              "Notion-Version": "2022-06-28",
              "Content-Type": "application/json",
          }

          # 极简 md -> paragraph 块（逐行写入，保留全部原文；每段 1800 字以内，规避单 rich_text 限制）
          def md_to_blocks(md: str):
              blocks = []
              for line in md.splitlines():
                  if not line.strip():
                      blocks.append({
                          "object": "block",
                          "type": "paragraph",
                          "paragraph": {"rich_text": []}
                      })
                  else:
                      blocks.append({
                          "object": "block",
                          "type": "paragraph",
                          "paragraph": {
                              "rich_text": [
                                  {"type": "text", "text": {"content": line[:1800]}}
                              ]
                          }
                      })
              return blocks

          def chunk(lst, n):
              for i in range(0, len(lst), n):
                  yield lst[i:i+n]

          with open(FILE, "r", encoding="utf-8") as f:
              md = f.read()

          today = datetime.date.today().isoformat()
          title = f"AI 趋势日报 (ZH) {today}"

          # 先创建空页（写入属性）
          create_payload = {
              "parent": {"database_id": DB_ID},
              "properties": {
                  "Title": {"title": [{"text": {"content": title}}]},
                  "Date":  {"date": {"start": today}},
                  "排版状态": {"select": {"name": "已排版"}}
              }
          }
          r = requests.post("https://api.notion.com/v1/pages", headers=headers, json=create_payload)
          if r.status_code >= 300:
              raise SystemExit(f"Create page failed: {r.status_code} {r.text}")
          page_id = r.json()["id"]

          # 分页追加 children（每批 < 100，规避 Notion 限制）
          blocks = md_to_blocks(md)
          for pack in chunk(blocks, 90):
              rr = requests.patch(
                  f"https://api.notion.com/v1/blocks/{page_id}/children",
                  headers=headers, json={"children": pack}
              )
              if rr.status_code >= 300:
                  raise SystemExit(f"Append children failed: {rr.status_code} {rr.text}")

          print("OK: Notion page created:", page_id)
          PY
