  - name: Push reports to Notion (ZH & EN)
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          python - <<'PY'
          import os, requests, re, json, datetime, pathlib

          TOKEN = os.environ["NOTION_API_KEY"]
          DB_ID = os.environ["NOTION_DATABASE_ID"]
          TITLE_PROP = "Title"    # 你的数据库标题属性名
          DATE_PROP  = "Date"     # 日期属性名（可选，没有就删掉 DATE_PROP 相关行）

          HEADERS = {
            "Authorization": f"Bearer {TOKEN}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json",
          }

          # —— 简单 Markdown -> Notion blocks（段落/标题）——
          def md_to_blocks(markdown: str):
            # 去掉 Markdown 表格竖线，避免太长的 rich_text
            markdown = re.sub(r"\|", " ", markdown)

            blocks = []
            for raw in markdown.splitlines():
              line = raw.rstrip()
              if not line:
                blocks.append({"object":"block","type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":""}}]}})
                continue

              # 识别 #/##/### 标题
              m = re.match(r'^(#{1,3})\s+(.*)$', line)
              if m:
                hashes, text = m.groups()
                level = len(hashes)
                blocks.append({
                  "object":"block",
                  "type":"heading_{}".format(level),
                  "heading_{}".format(level): {
                    "rich_text":[{"type":"text","text":{"content": text[:1800]}}]
                  }
                })
              else:
                # 普通段落
                blocks.append({
                  "object":"block",
                  "type":"paragraph",
                  "paragraph":{"rich_text":[{"type":"text","text":{"content": line[:1800]}}]}
                })

            return blocks

          def create_page(title: str, date_val: datetime.date):
            payload = {
              "parent": {"database_id": DB_ID},
              "properties": {
                TITLE_PROP: {"title":[{"type":"text","text":{"content": title}}]}
              }
            }
            # 如果你的库里存在 Date 属性
            if DATE_PROP:
              payload["properties"][DATE_PROP] = {"date":{"start": date_val.isoformat()}}

            r = requests.post("https://api.notion.com/v1/pages", headers=HEADERS, json=payload)
            if r.status_code >= 300:
              raise RuntimeError(f"create page failed: {r.status_code} {r.text}")
            return r.json()["id"]

          def append_children(page_id: str, children: list, batch_size: int = 90):
            # Notion 限制每次最多 100，取 90 更保险
            for i in range(0, len(children), batch_size):
              chunk = children[i:i+batch_size]
              url = f"https://api.notion.com/v1/blocks/{page_id}/children"
              r = requests.patch(url, headers=HEADERS, json={"children": chunk})
              if r.status_code >= 300:
                raise RuntimeError(f"append children failed: {r.status_code} {r.text}")

          # 读取当天生成的 MD（如果没有就取 latest）
          today = datetime.date.today()
          md_zh = pathlib.Path("reports/latest_report_zh.md")
          md_en = pathlib.Path("reports/latest_report_en.md")

          def push_one(md_path: pathlib.Path, lang_tag: str):
            if not md_path.exists():
              raise FileNotFoundError(f"{md_path} not found")
            md = md_path.read_text(encoding="utf-8")
            blocks = md_to_blocks(md)

            title = f"AI Trends Daily ({lang_tag}) {today.isoformat()}"
            page_id = create_page(title, today)

            # 分批追加，避免超 100 限制
            if blocks:
              append_children(page_id, blocks)

            print(f"Notion sync done: {title}")

          # ZH & EN 都推
          push_one(md_zh, "ZH")
          push_one(md_en, "EN")
          PY
