name: Daily Reddit AI Trends

on:
  schedule:
    - cron: "5 6 * * *"   # 每天 06:05 UTC 运行
  workflow_dispatch:       # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Generate reports (ZH & EN)
        env:
          REDDIT_CLIENT_ID:     ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT:    ${{ secrets.REDDIT_USER_AGENT }}
          GROQ_API_KEY:         ${{ secrets.GROQ_API_KEY }}
          REPORT_LANGUAGES:     ${{ secrets.REPORT_LANGUAGES }}
        run: |
          if [ -z "${REPORT_LANGUAGES}" ]; then
            python report_generation.py --languages zh en
          else
            python report_generation.py --languages ${REPORT_LANGUAGES}
          fi

      - name: Detect changes
        id: git_status
        run: |
          if git status --porcelain reports | grep -qE '^( M|M |A |??)'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit reports (only when changed)
        if: steps.git_status.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add reports/
          git commit -m "Daily report update"

      - name: Push changes (only when changed)
        if: steps.git_status.outputs.changed == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}

      - name: Push reports to Notion (ZH & EN)
        if: steps.git_status.outputs.changed == 'true'
        env:
          NOTION_API_KEY:     ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}   # ← 已修正（加了空格）
        run: |
          python - <<'PY'
          import os, json, re, datetime, pathlib, requests, time

          TOKEN = os.environ["NOTION_API_KEY"]
          DB_ID = os.environ["NOTION_DATABASE_ID"]
          HEADERS = {
              "Authorization": f"Bearer {TOKEN}",
              "Notion-Version": "2022-06-28",
              "Content-Type": "application/json",
          }

          TITLE_PROP = "Title"
          DATE_PROP  = "Date"

          def md_to_blocks(md: str):
              blocks, buf = [], []
              def flush_p():
                  if not buf: return
                  text = "\n".join(buf).strip()
                  if not text:
                      buf.clear(); return
                  text = re.sub(r"\|", " ", text)[:1900]
                  blocks.append({
                      "object": "block",
                      "type": "paragraph",
                      "paragraph": {"rich_text": [{"type":"text","text":{"content": text}}]}
                  })
                  buf.clear()

              for line in md.splitlines():
                  m = re.match(r'^(#{1,3})\s+(.*)$', line)
                  if m:
                      flush_p()
                      level = len(m.group(1))
                      title = m.group(2)[:200]
                      blocks.append({
                          "object":"block",
                          "type": f"heading_{level}",
                          f"heading_{level}": {"rich_text":[{"type":"text","text":{"content": title}}]}
                      })
                  elif re.match(r'^\s*[-*]\s+', line):
                      flush_p()
                      item = re.sub(r'^\s*[-*]\s+', '', line)[:1900]
                      blocks.append({
                          "object":"block",
                          "type":"bulleted_list_item",
                          "bulleted_list_item":{"rich_text":[{"type":"text","text":{"content": item}}]}
                      })
                  else:
                      buf.append(line)
              flush_p()
              return blocks or [{
                  "object":"block","type":"paragraph",
                  "paragraph":{"rich_text":[{"type":"text","text":{"content":"(空)"}}]}
              }]

          def create_with_chunks(title, md, date_iso):
              blocks = md_to_blocks(md)
              first, rest = blocks[:80], blocks[80:]

              props = {TITLE_PROP: {"title":[{"type":"text","text":{"content": title}}]}}
              if DATE_PROP:
                  props[DATE_PROP] = {"date":{"start": date_iso}}

              payload = {"parent":{"database_id": DB_ID}, "properties": props, "children": first}
              r = requests.post("https://api.notion.com/v1/pages", headers=HEADERS, data=json.dumps(payload))
              if r.status_code >= 300:
                  raise RuntimeError(f"create page failed: {r.status_code} {r.text}")
              page_id = r.json()["id"]

              while rest:
                  chunk, rest = rest[:90], rest[90:]
                  url = f"https://api.notion.com/v1/blocks/{page_id}/children"
                  r2 = requests.patch(url, headers=HEADERS, data=json.dumps({"children": chunk}))
                  if r2.status_code >= 300:
                      raise RuntimeError(f"append children failed: {r2.status_code} {r2.text}")
                  time.sleep(0.3)
              return page_id

          today = datetime.date.today().isoformat()
          reports_dir = pathlib.Path("reports")
          zh_path = reports_dir / "latest_report_zh.md"
          en_path = reports_dir / "latest_report_en.md"

          if zh_path.exists():
              title = f"AI 趋势日报 (ZH) {today}"
              md = zh_path.read_text(encoding="utf-8")
              create_with_chunks(title, md, today)

          if en_path.exists():
              title = f"AI Trends Daily (EN) {today}"
              md = en_path.read_text(encoding="utf-8")
              create_with_chunks(title, md, today)

          print("Notion sync done.")
          PY
